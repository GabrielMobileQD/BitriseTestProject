# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest
     # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a single command using the runners shell
      - name: Cache and/or restore node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - uses: burrunan/gradle-cache-action@v1
        name: Cache Gradle
        # Extra environment variables for Gradle execution (regular GitHub Actions feature)
        # Note: env must be outside of "with"
        env:
          VARIABLE: cache-gradle
        with:
          # If you have multiple jobs, use distinct job-id in in case you want to split caches
          # For instance, jobs with different JDK versions can't share caches
          # RUNNER_OS is added to job-id automatically
          job-id: jdk8
          # Specifies arguments for Gradle execution
          # If arguments is missing or empty, then Gradle is not executed
          #arguments: build
          # arguments can be multi-line for better readability
          # arguments: |
          #  --no-paralell
          #  build
          #  -x test
          # Gradle version to use for execution:
          #   wrapper (default), current, rc, nightly, release-nightly, or
          #   vzersions like 6.6 (see https://services.gradle.org/versions/all)
          gradle-version: wrapper
          properties: |
            kotlin.js.compiler=ir
            kotlin.parallel.tasks.in.project=true
        #npm cache files are stored in 
      - name: Setup detox-cli
        run: npm install -g detox-cli
      - name: Install npm dependencies
        run: npm install
      - name: Build Android Release
        run: |
          cd android && ./gradlew assembleRelease
      # - name: run an Android Emulator and run detox tests.
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #    api-level: 29
      #    profile: Nexus One 
      #    script: |
      #         echo Oi, vou listar os avds disponiveis e apos isso rodar os testes em detox.
      #         avdmanager list avd
      #         detox build --c android.emu.release
      #         detox test -c android.emu.release  
#       # Runs a set of commands using the runners shell
#       - name: Greetings for android build
#         run: |
#           echo Lets build a APK for Android.

#       - name: Upload Artifact
#         uses: actions/upload-artifact@v1
#         with:
#           name: app-release.apk
#           path: android/app/build/outputs/apk/release/
